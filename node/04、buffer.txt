javascript语言自身只有字符串数据类型，没有二进制数据类型。
node.js中定义了一个Buffer类，用于创建存放二进制数据的缓存区。

buf.write(string, offset, length, encoding)
string  写入缓冲区的字符串
offset  缓冲区开始写入的索引值，默认为0  可选
length  写入的字节数，默认为buffer.length
encoding  使用的编码。默认是utf8。
返回实际写入的大小。如果buffer空间不足，则只会写入部分字符串。

buf.toString(encoding, start, end)
encoding  使用的编码，默认为'utf-8'。
start  指定开始读取的索引位置，默认为0。
end  结束位置，默认为缓冲区的末尾。
缓冲区数据并使用指定的编码返回字符串。

缓冲区合并
Buffer.concat(list, totalLength)

缓冲区裁剪
buf.slice(start, end)
返回一个新的缓冲区，它和旧缓冲区指向同一块内存，但是从索引start到end的位置剪切。

1	new Buffer(buffer) 
拷贝参数 buffer 的数据到 Buffer 实例。

2	new Buffer(str[, encoding])
分配一个新的 buffer ，其中包含着传入的 str 字符串。 encoding 编码方式默认为 'utf8'。

3	buf.length
返回这个 buffer 的 bytes 数。注意这未必是 buffer 里面内容的大小。
length 是 buffer 对象所分配的内存数，它不会随着这个 buffer 对象内容的改变而改变。

4	buf.write(string[, offset[, length]][, encoding])
根据参数 offset 偏移量和指定的 encoding 编码方式，将参数 string 数据写入buffer。 
offset 偏移量默认值是 0, encoding 编码方式默认是 utf8。 length 长度是将要写入的字符串的 bytes 大小。 
返回 number 类型，表示写入了多少 8 位字节流。
如果 buffer 没有足够的空间来放整个 string，它将只会只写入部分字符串。 
length 默认是 buffer.length - offset。 这个方法不会出现写入部分字符。

5	buf.toString([encoding[, start[, end]]])
根据 encoding 参数（默认是 'utf8'）返回一个解码过的 string 类型。
还会根据传入的参数 start (默认是 0) 和 end (默认是 buffer.length)作为取值范围。

6	buf.toJSON()
将 Buffer 实例转换为 JSON 对象。

7	buf[index]
获取或设置指定的字节。
返回值代表一个字节，所以返回值的合法范围是十六进制0x00到0xFF 或者十进制0至 255。

8	buf.equals(otherBuffer)
比较两个缓冲区是否相等，如果是返回 true，否则返回 false。

9	buf.compare(otherBuffer)
比较两个 Buffer 对象，返回一个数字，表示 buf 在 otherBuffer 之前，之后或相同。

10	buf.copy(targetBuffer[, targetStart[, sourceStart[, sourceEnd]]])
buffer 拷贝，源和目标可以相同。 
targetStart 目标开始偏移和 sourceStart 源开始偏移默认都是 0。 
sourceEnd 源结束位置偏移默认是源的长度 buffer.length 。

11  buf.slice([start[, end]])
剪切Buffer对象，根据 start(默认是 0 )和end(默认是buffer.length)偏移和裁剪了索引。 
负的索引是从 buffer 尾部开始计算的。

12  buf.fill(value[, offset][, end])    使用指定的value填充buffer